Starting parse
Entering state 0
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 19
Reducing stack by rule 194 (line 579):
   $1 = token INT ()
-> $$ = nterm simple_type_specifier ()
Stack now 0
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0
Entering state 57
Reducing stack by rule 172 (line 545):
   $1 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0
Entering state 58
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 6 (line 189):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 58
Entering state 47
Reducing stack by rule 25 (line 246):
   $1 = nterm identifier ()
-> $$ = nterm unqualified_id ()
Stack now 0 58
Entering state 50
Reducing stack by rule 23 (line 241):
   $1 = nterm unqualified_id ()
-> $$ = nterm id_expression ()
Stack now 0 58
Entering state 49
Reducing stack by rule 264 (line 734):
   $1 = nterm id_expression ()
-> $$ = nterm declarator_id ()
Stack now 0 58
Entering state 80
Reducing stack by rule 246 (line 704):
   $1 = nterm declarator_id ()
-> $$ = nterm direct_declarator ()
Stack now 0 58
Entering state 77
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 133
Reading a token: Next token is token ')' ()
Reducing stack by rule 282 (line 767):
-> $$ = nterm parameter_declaration_clause ()
Stack now 0 58 77 133
Entering state 199
Next token is token ')' ()
Shifting token ')' ()
Entering state 356
Reading a token: Next token is token '{' ()
Reducing stack by rule 250 (line 708):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm parameter_declaration_clause ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 58
Entering state 77
Next token is token '{' ()
Reducing stack by rule 244 (line 699):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 58
Entering state 127
Next token is token '{' ()
Reducing stack by rule 380 (line 1034):
-> $$ = nterm ctor_initializer_opt ()
Stack now 0 58 127
Entering state 187
Next token is token '{' ()
Shifting token '{' ()
Entering state 196
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 19
Reducing stack by rule 194 (line 579):
   $1 = token INT ()
-> $$ = nterm simple_type_specifier ()
Stack now 0 58 127 187 196
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 58 127 187 196
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0 58 127 187 196
Entering state 57
Reducing stack by rule 172 (line 545):
   $1 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0 58 127 187 196
Entering state 352
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 6 (line 189):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 58 127 187 196 352
Entering state 47
Reducing stack by rule 25 (line 246):
   $1 = nterm identifier ()
-> $$ = nterm unqualified_id ()
Stack now 0 58 127 187 196 352
Entering state 50
Reducing stack by rule 23 (line 241):
   $1 = nterm unqualified_id ()
-> $$ = nterm id_expression ()
Stack now 0 58 127 187 196 352
Entering state 49
Reducing stack by rule 264 (line 734):
   $1 = nterm id_expression ()
-> $$ = nterm declarator_id ()
Stack now 0 58 127 187 196 352
Entering state 80
Reducing stack by rule 246 (line 704):
   $1 = nterm declarator_id ()
-> $$ = nterm direct_declarator ()
Stack now 0 58 127 187 196 352
Entering state 77
Reading a token: Next token is token ';' ()
Reducing stack by rule 244 (line 699):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 58 127 187 196 352
Entering state 307
Next token is token ';' ()
Reducing stack by rule 370 (line 1009):
-> $$ = nterm initializer_opt ()
Stack now 0 58 127 187 196 352 307
Entering state 186
Reducing stack by rule 243 (line 695):
   $1 = nterm declarator ()
   $2 = nterm initializer_opt ()
-> $$ = nterm init_declarator ()
Stack now 0 58 127 187 196 352
Entering state 126
Reducing stack by rule 241 (line 690):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 58 127 187 196 352
Entering state 125
Next token is token ';' ()
Shifting token ';' ()
Entering state 180
Reducing stack by rule 165 (line 532):
   $1 = nterm decl_specifier_seq ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm simple_declaration ()
Stack now 0 58 127 187 196
Entering state 56
Reducing stack by rule 160 (line 524):
   $1 = nterm simple_declaration ()
-> $$ = nterm block_declaration ()
Stack now 0 58 127 187 196
Entering state 351
Reducing stack by rule 153 (line 504):
   $1 = nterm block_declaration ()
-> $$ = nterm declaration_statement ()
Stack now 0 58 127 187 196
Entering state 350
Reducing stack by rule 130 (line 451):
   $1 = nterm declaration_statement ()
-> $$ = nterm statement ()
Stack now 0 58 127 187 196
Entering state 342
Reducing stack by rule 137 (line 470):
   $1 = nterm statement ()
-> $$ = nterm statement_seq ()
Stack now 0 58 127 187 196
Entering state 346
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 19
Reducing stack by rule 194 (line 579):
   $1 = token INT ()
-> $$ = nterm simple_type_specifier ()
Stack now 0 58 127 187 196 346
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 58 127 187 196 346
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0 58 127 187 196 346
Entering state 57
Reducing stack by rule 172 (line 545):
   $1 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0 58 127 187 196 346
Entering state 352
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 6 (line 189):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 58 127 187 196 346 352
Entering state 47
Reducing stack by rule 25 (line 246):
   $1 = nterm identifier ()
-> $$ = nterm unqualified_id ()
Stack now 0 58 127 187 196 346 352
Entering state 50
Reducing stack by rule 23 (line 241):
   $1 = nterm unqualified_id ()
-> $$ = nterm id_expression ()
Stack now 0 58 127 187 196 346 352
Entering state 49
Reducing stack by rule 264 (line 734):
   $1 = nterm id_expression ()
-> $$ = nterm declarator_id ()
Stack now 0 58 127 187 196 346 352
Entering state 80
Reducing stack by rule 246 (line 704):
   $1 = nterm declarator_id ()
-> $$ = nterm direct_declarator ()
Stack now 0 58 127 187 196 346 352
Entering state 77
Reading a token: Next token is token ';' ()
Reducing stack by rule 244 (line 699):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 58 127 187 196 346 352
Entering state 307
Next token is token ';' ()
Reducing stack by rule 370 (line 1009):
-> $$ = nterm initializer_opt ()
Stack now 0 58 127 187 196 346 352 307
Entering state 186
Reducing stack by rule 243 (line 695):
   $1 = nterm declarator ()
   $2 = nterm initializer_opt ()
-> $$ = nterm init_declarator ()
Stack now 0 58 127 187 196 346 352
Entering state 126
Reducing stack by rule 241 (line 690):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 58 127 187 196 346 352
Entering state 125
Next token is token ';' ()
Shifting token ';' ()
Entering state 180
Reducing stack by rule 165 (line 532):
   $1 = nterm decl_specifier_seq ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm simple_declaration ()
Stack now 0 58 127 187 196 346
Entering state 56
Reducing stack by rule 160 (line 524):
   $1 = nterm simple_declaration ()
-> $$ = nterm block_declaration ()
Stack now 0 58 127 187 196 346
Entering state 351
Reducing stack by rule 153 (line 504):
   $1 = nterm block_declaration ()
-> $$ = nterm declaration_statement ()
Stack now 0 58 127 187 196 346
Entering state 350
Reducing stack by rule 130 (line 451):
   $1 = nterm declaration_statement ()
-> $$ = nterm statement ()
Stack now 0 58 127 187 196 346
Entering state 487
Reducing stack by rule 138 (line 471):
   $1 = nterm statement_seq ()
   $2 = nterm statement ()
-> $$ = nterm statement_seq ()
Stack now 0 58 127 187 196
Entering state 346
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 19
Reducing stack by rule 194 (line 579):
   $1 = token INT ()
-> $$ = nterm simple_type_specifier ()
Stack now 0 58 127 187 196 346
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 58 127 187 196 346
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0 58 127 187 196 346
Entering state 57
Reducing stack by rule 172 (line 545):
   $1 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0 58 127 187 196 346
Entering state 352
Reading a token: Next token is token CLASS_NAME ()
Shifting token CLASS_NAME ()
Entering state 3
Reading a token: Next token is token ';' ()
Reducing stack by rule 4 (line 177):
   $1 = token CLASS_NAME ()
-> $$ = nterm class_name ()
Stack now 0 58 127 187 196 346 352
Entering state 45
Next token is token ';' ()
Reducing stack by rule 201 (line 589):
   $1 = nterm class_name ()
-> $$ = nterm type_name ()
Stack now 0 58 127 187 196 346 352
Entering state 63
Reducing stack by rule 187 (line 572):
   $1 = nterm type_name ()
-> $$ = nterm simple_type_specifier ()
Stack now 0 58 127 187 196 346 352
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 58 127 187 196 346 352
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0 58 127 187 196 346 352
Entering state 124
Reducing stack by rule 173 (line 546):
   $1 = nterm decl_specifier_seq ()
   $2 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0 58 127 187 196 346
Entering state 352
Next token is token ';' ()
Shifting token ';' ()
Entering state 123
Reducing stack by rule 166 (line 533):
   $1 = nterm decl_specifier_seq ()
   $2 = token ';' ()
-> $$ = nterm simple_declaration ()
Stack now 0 58 127 187 196 346
Entering state 56
Reducing stack by rule 160 (line 524):
   $1 = nterm simple_declaration ()
-> $$ = nterm block_declaration ()
Stack now 0 58 127 187 196 346
Entering state 351
Reducing stack by rule 153 (line 504):
   $1 = nterm block_declaration ()
-> $$ = nterm declaration_statement ()
Stack now 0 58 127 187 196 346
Entering state 350
Reducing stack by rule 130 (line 451):
   $1 = nterm declaration_statement ()
-> $$ = nterm statement ()
Stack now 0 58 127 187 196 346
Entering state 487
Reducing stack by rule 138 (line 471):
   $1 = nterm statement_seq ()
   $2 = nterm statement ()
-> $$ = nterm statement_seq ()
Stack now 0 58 127 187 196
Entering state 346
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 19
Reducing stack by rule 194 (line 579):
   $1 = token INT ()
-> $$ = nterm simple_type_specifier ()
Stack now 0 58 127 187 196 346
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 58 127 187 196 346
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0 58 127 187 196 346
Entering state 57
Reducing stack by rule 172 (line 545):
   $1 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0 58 127 187 196 346
Entering state 352
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 6 (line 189):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 58 127 187 196 346 352
Entering state 47
Reducing stack by rule 25 (line 246):
   $1 = nterm identifier ()
-> $$ = nterm unqualified_id ()
Stack now 0 58 127 187 196 346 352
Entering state 50
Reducing stack by rule 23 (line 241):
   $1 = nterm unqualified_id ()
-> $$ = nterm id_expression ()
Stack now 0 58 127 187 196 346 352
Entering state 49
Reducing stack by rule 264 (line 734):
   $1 = nterm id_expression ()
-> $$ = nterm declarator_id ()
Stack now 0 58 127 187 196 346 352
Entering state 80
Reducing stack by rule 246 (line 704):
   $1 = nterm declarator_id ()
-> $$ = nterm direct_declarator ()
Stack now 0 58 127 187 196 346 352
Entering state 77
Reading a token: Next token is token ';' ()
Reducing stack by rule 244 (line 699):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 58 127 187 196 346 352
Entering state 307
Next token is token ';' ()
Reducing stack by rule 370 (line 1009):
-> $$ = nterm initializer_opt ()
Stack now 0 58 127 187 196 346 352 307
Entering state 186
Reducing stack by rule 243 (line 695):
   $1 = nterm declarator ()
   $2 = nterm initializer_opt ()
-> $$ = nterm init_declarator ()
Stack now 0 58 127 187 196 346 352
Entering state 126
Reducing stack by rule 241 (line 690):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 58 127 187 196 346 352
Entering state 125
Next token is token ';' ()
Shifting token ';' ()
Entering state 180
Reducing stack by rule 165 (line 532):
   $1 = nterm decl_specifier_seq ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm simple_declaration ()
Stack now 0 58 127 187 196 346
Entering state 56
Reducing stack by rule 160 (line 524):
   $1 = nterm simple_declaration ()
-> $$ = nterm block_declaration ()
Stack now 0 58 127 187 196 346
Entering state 351
Reducing stack by rule 153 (line 504):
   $1 = nterm block_declaration ()
-> $$ = nterm declaration_statement ()
Stack now 0 58 127 187 196 346
Entering state 350
Reducing stack by rule 130 (line 451):
   $1 = nterm declaration_statement ()
-> $$ = nterm statement ()
Stack now 0 58 127 187 196 346
Entering state 487
Reducing stack by rule 138 (line 471):
   $1 = nterm statement_seq ()
   $2 = nterm statement ()
-> $$ = nterm statement_seq ()
Stack now 0 58 127 187 196
Entering state 346
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 6 (line 189):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 58 127 187 196 346
Entering state 338
Reading a token: Next token is token '=' ()
Reducing stack by rule 25 (line 246):
   $1 = nterm identifier ()
-> $$ = nterm unqualified_id ()
Stack now 0 58 127 187 196 346
Entering state 50
Reducing stack by rule 23 (line 241):
   $1 = nterm unqualified_id ()
-> $$ = nterm id_expression ()
Stack now 0 58 127 187 196 346
Entering state 226
Reducing stack by rule 22 (line 237):
   $1 = nterm id_expression ()
-> $$ = nterm primary_expression ()
Stack now 0 58 127 187 196 346
Entering state 225
Reducing stack by rule 32 (line 262):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 58 127 187 196 346
Entering state 227
Next token is token '=' ()
Reducing stack by rule 43 (line 282):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 58 127 187 196 346
Entering state 228
Reducing stack by rule 72 (line 338):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 58 127 187 196 346
Entering state 232
Reducing stack by rule 74 (line 343):
   $1 = nterm cast_expression ()
-> $$ = nterm pm_expression ()
Stack now 0 58 127 187 196 346
Entering state 233
Next token is token '=' ()
Reducing stack by rule 77 (line 349):
   $1 = nterm pm_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 58 127 187 196 346
Entering state 234
Next token is token '=' ()
Reducing stack by rule 81 (line 356):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 58 127 187 196 346
Entering state 235
Next token is token '=' ()
Reducing stack by rule 84 (line 362):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 58 127 187 196 346
Entering state 236
Next token is token '=' ()
Reducing stack by rule 87 (line 368):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 58 127 187 196 346
Entering state 237
Next token is token '=' ()
Reducing stack by rule 92 (line 376):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 58 127 187 196 346
Entering state 238
Next token is token '=' ()
Reducing stack by rule 95 (line 382):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 58 127 187 196 346
Entering state 239
Next token is token '=' ()
Reducing stack by rule 97 (line 387):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 58 127 187 196 346
Entering state 240
Next token is token '=' ()
Reducing stack by rule 99 (line 392):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 58 127 187 196 346
Entering state 241
Next token is token '=' ()
Reducing stack by rule 101 (line 397):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 58 127 187 196 346
Entering state 242
Next token is token '=' ()
Reducing stack by rule 103 (line 402):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 58 127 187 196 346
Entering state 310
Next token is token '=' ()
Shifting token '=' ()
Entering state 460
Reducing stack by rule 110 (line 418):
   $1 = token '=' ()
-> $$ = nterm assignment_operator ()
Stack now 0 58 127 187 196 346 310
Entering state 461
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 200
Reducing stack by rule 12 (line 201):
   $1 = token INTEGER ()
-> $$ = nterm integer_literal ()
Stack now 0 58 127 187 196 346 310 461
Entering state 220
Reducing stack by rule 7 (line 193):
   $1 = nterm integer_literal ()
-> $$ = nterm literal ()
Stack now 0 58 127 187 196 346 310 461
Entering state 219
Reducing stack by rule 19 (line 234):
   $1 = nterm literal ()
-> $$ = nterm primary_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 225
Reducing stack by rule 32 (line 262):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 227
Reading a token: Next token is token ';' ()
Reducing stack by rule 43 (line 282):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 228
Reducing stack by rule 72 (line 338):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 232
Reducing stack by rule 74 (line 343):
   $1 = nterm cast_expression ()
-> $$ = nterm pm_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 233
Next token is token ';' ()
Reducing stack by rule 77 (line 349):
   $1 = nterm pm_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 234
Next token is token ';' ()
Reducing stack by rule 81 (line 356):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 235
Next token is token ';' ()
Reducing stack by rule 84 (line 362):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 236
Next token is token ';' ()
Reducing stack by rule 87 (line 368):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 237
Next token is token ';' ()
Reducing stack by rule 92 (line 376):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 238
Next token is token ';' ()
Reducing stack by rule 95 (line 382):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 239
Next token is token ';' ()
Reducing stack by rule 97 (line 387):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 240
Next token is token ';' ()
Reducing stack by rule 99 (line 392):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 241
Next token is token ';' ()
Reducing stack by rule 101 (line 397):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 242
Next token is token ';' ()
Reducing stack by rule 103 (line 402):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 310
Next token is token ';' ()
Reducing stack by rule 105 (line 407):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 311
Reducing stack by rule 107 (line 412):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 559
Reducing stack by rule 108 (line 413):
   $1 = nterm logical_or_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 58 127 187 196 346
Entering state 340
Reducing stack by rule 121 (line 432):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 58 127 187 196 346
Entering state 341
Next token is token ';' ()
Reducing stack by rule 363 (line 990):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 58 127 187 196 346
Entering state 354
Next token is token ';' ()
Shifting token ';' ()
Entering state 488
Reducing stack by rule 135 (line 462):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 58 127 187 196 346
Entering state 344
Reducing stack by rule 125 (line 446):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 58 127 187 196 346
Entering state 487
Reducing stack by rule 138 (line 471):
   $1 = nterm statement_seq ()
   $2 = nterm statement ()
-> $$ = nterm statement_seq ()
Stack now 0 58 127 187 196
Entering state 346
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 6 (line 189):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 58 127 187 196 346
Entering state 338
Reading a token: Next token is token '=' ()
Reducing stack by rule 25 (line 246):
   $1 = nterm identifier ()
-> $$ = nterm unqualified_id ()
Stack now 0 58 127 187 196 346
Entering state 50
Reducing stack by rule 23 (line 241):
   $1 = nterm unqualified_id ()
-> $$ = nterm id_expression ()
Stack now 0 58 127 187 196 346
Entering state 226
Reducing stack by rule 22 (line 237):
   $1 = nterm id_expression ()
-> $$ = nterm primary_expression ()
Stack now 0 58 127 187 196 346
Entering state 225
Reducing stack by rule 32 (line 262):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 58 127 187 196 346
Entering state 227
Next token is token '=' ()
Reducing stack by rule 43 (line 282):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 58 127 187 196 346
Entering state 228
Reducing stack by rule 72 (line 338):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 58 127 187 196 346
Entering state 232
Reducing stack by rule 74 (line 343):
   $1 = nterm cast_expression ()
-> $$ = nterm pm_expression ()
Stack now 0 58 127 187 196 346
Entering state 233
Next token is token '=' ()
Reducing stack by rule 77 (line 349):
   $1 = nterm pm_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 58 127 187 196 346
Entering state 234
Next token is token '=' ()
Reducing stack by rule 81 (line 356):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 58 127 187 196 346
Entering state 235
Next token is token '=' ()
Reducing stack by rule 84 (line 362):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 58 127 187 196 346
Entering state 236
Next token is token '=' ()
Reducing stack by rule 87 (line 368):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 58 127 187 196 346
Entering state 237
Next token is token '=' ()
Reducing stack by rule 92 (line 376):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 58 127 187 196 346
Entering state 238
Next token is token '=' ()
Reducing stack by rule 95 (line 382):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 58 127 187 196 346
Entering state 239
Next token is token '=' ()
Reducing stack by rule 97 (line 387):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 58 127 187 196 346
Entering state 240
Next token is token '=' ()
Reducing stack by rule 99 (line 392):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 58 127 187 196 346
Entering state 241
Next token is token '=' ()
Reducing stack by rule 101 (line 397):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 58 127 187 196 346
Entering state 242
Next token is token '=' ()
Reducing stack by rule 103 (line 402):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 58 127 187 196 346
Entering state 310
Next token is token '=' ()
Shifting token '=' ()
Entering state 460
Reducing stack by rule 110 (line 418):
   $1 = token '=' ()
-> $$ = nterm assignment_operator ()
Stack now 0 58 127 187 196 346 310
Entering state 461
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 6 (line 189):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 58 127 187 196 346 310 461
Entering state 47
Reducing stack by rule 25 (line 246):
   $1 = nterm identifier ()
-> $$ = nterm unqualified_id ()
Stack now 0 58 127 187 196 346 310 461
Entering state 50
Reducing stack by rule 23 (line 241):
   $1 = nterm unqualified_id ()
-> $$ = nterm id_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 226
Reducing stack by rule 22 (line 237):
   $1 = nterm id_expression ()
-> $$ = nterm primary_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 225
Reducing stack by rule 32 (line 262):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 227
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 377
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 200
Reducing stack by rule 12 (line 201):
   $1 = token INTEGER ()
-> $$ = nterm integer_literal ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 220
Reducing stack by rule 7 (line 193):
   $1 = nterm integer_literal ()
-> $$ = nterm literal ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 219
Reducing stack by rule 19 (line 234):
   $1 = nterm literal ()
-> $$ = nterm primary_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 225
Reducing stack by rule 32 (line 262):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 227
Reading a token: Next token is token ')' ()
Reducing stack by rule 43 (line 282):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 228
Reducing stack by rule 72 (line 338):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 232
Reducing stack by rule 74 (line 343):
   $1 = nterm cast_expression ()
-> $$ = nterm pm_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 233
Next token is token ')' ()
Reducing stack by rule 77 (line 349):
   $1 = nterm pm_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 234
Next token is token ')' ()
Reducing stack by rule 81 (line 356):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 235
Next token is token ')' ()
Reducing stack by rule 84 (line 362):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 236
Next token is token ')' ()
Reducing stack by rule 87 (line 368):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 237
Next token is token ')' ()
Reducing stack by rule 92 (line 376):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 238
Next token is token ')' ()
Reducing stack by rule 95 (line 382):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 239
Next token is token ')' ()
Reducing stack by rule 97 (line 387):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 240
Next token is token ')' ()
Reducing stack by rule 99 (line 392):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 241
Next token is token ')' ()
Reducing stack by rule 101 (line 397):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 242
Next token is token ')' ()
Reducing stack by rule 103 (line 402):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 310
Next token is token ')' ()
Reducing stack by rule 105 (line 407):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 311
Reducing stack by rule 107 (line 412):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 312
Reducing stack by rule 41 (line 277):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression_list ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 470
Next token is token ')' ()
Reducing stack by rule 353 (line 965):
   $1 = nterm expression_list ()
-> $$ = nterm expression_list_opt ()
Stack now 0 58 127 187 196 346 310 461 227 377
Entering state 514
Next token is token ')' ()
Shifting token ')' ()
Entering state 603
Reducing stack by rule 34 (line 264):
   $1 = nterm postfix_expression ()
   $2 = token '(' ()
   $3 = nterm expression_list_opt ()
   $4 = token ')' ()
-> $$ = nterm postfix_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 227
Reading a token: Next token is token ';' ()
Reducing stack by rule 43 (line 282):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 228
Reducing stack by rule 72 (line 338):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 232
Reducing stack by rule 74 (line 343):
   $1 = nterm cast_expression ()
-> $$ = nterm pm_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 233
Next token is token ';' ()
Reducing stack by rule 77 (line 349):
   $1 = nterm pm_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 234
Next token is token ';' ()
Reducing stack by rule 81 (line 356):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 235
Next token is token ';' ()
Reducing stack by rule 84 (line 362):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 236
Next token is token ';' ()
Reducing stack by rule 87 (line 368):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 237
Next token is token ';' ()
Reducing stack by rule 92 (line 376):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 238
Next token is token ';' ()
Reducing stack by rule 95 (line 382):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 239
Next token is token ';' ()
Reducing stack by rule 97 (line 387):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 240
Next token is token ';' ()
Reducing stack by rule 99 (line 392):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 241
Next token is token ';' ()
Reducing stack by rule 101 (line 397):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 242
Next token is token ';' ()
Reducing stack by rule 103 (line 402):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 310
Next token is token ';' ()
Reducing stack by rule 105 (line 407):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 311
Reducing stack by rule 107 (line 412):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 58 127 187 196 346 310 461
Entering state 559
Reducing stack by rule 108 (line 413):
   $1 = nterm logical_or_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 58 127 187 196 346
Entering state 340
Reducing stack by rule 121 (line 432):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 58 127 187 196 346
Entering state 341
Next token is token ';' ()
Reducing stack by rule 363 (line 990):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 58 127 187 196 346
Entering state 354
Next token is token ';' ()
Shifting token ';' ()
Entering state 488
Reducing stack by rule 135 (line 462):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 58 127 187 196 346
Entering state 344
Reducing stack by rule 125 (line 446):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 58 127 187 196 346
Entering state 487
Reducing stack by rule 138 (line 471):
   $1 = nterm statement_seq ()
   $2 = nterm statement ()
-> $$ = nterm statement_seq ()
Stack now 0 58 127 187 196
Entering state 346
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 334
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 200
Reducing stack by rule 12 (line 201):
   $1 = token INTEGER ()
-> $$ = nterm integer_literal ()
Stack now 0 58 127 187 196 346 334
Entering state 220
Reducing stack by rule 7 (line 193):
   $1 = nterm integer_literal ()
-> $$ = nterm literal ()
Stack now 0 58 127 187 196 346 334
Entering state 219
Reducing stack by rule 19 (line 234):
   $1 = nterm literal ()
-> $$ = nterm primary_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 225
Reducing stack by rule 32 (line 262):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 227
Reading a token: Next token is token ';' ()
Reducing stack by rule 43 (line 282):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 228
Reducing stack by rule 72 (line 338):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 232
Reducing stack by rule 74 (line 343):
   $1 = nterm cast_expression ()
-> $$ = nterm pm_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 233
Next token is token ';' ()
Reducing stack by rule 77 (line 349):
   $1 = nterm pm_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 234
Next token is token ';' ()
Reducing stack by rule 81 (line 356):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 235
Next token is token ';' ()
Reducing stack by rule 84 (line 362):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 236
Next token is token ';' ()
Reducing stack by rule 87 (line 368):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 237
Next token is token ';' ()
Reducing stack by rule 92 (line 376):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 238
Next token is token ';' ()
Reducing stack by rule 95 (line 382):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 239
Next token is token ';' ()
Reducing stack by rule 97 (line 387):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 240
Next token is token ';' ()
Reducing stack by rule 99 (line 392):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 241
Next token is token ';' ()
Reducing stack by rule 101 (line 397):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 242
Next token is token ';' ()
Reducing stack by rule 103 (line 402):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 310
Next token is token ';' ()
Reducing stack by rule 105 (line 407):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 311
Reducing stack by rule 107 (line 412):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 58 127 187 196 346 334
Entering state 340
Reducing stack by rule 121 (line 432):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 58 127 187 196 346 334
Entering state 341
Next token is token ';' ()
Reducing stack by rule 363 (line 990):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 58 127 187 196 346 334
Entering state 481
Next token is token ';' ()
Shifting token ';' ()
Entering state 576
Reducing stack by rule 151 (line 499):
   $1 = token RETURN ()
   $2 = nterm expression_opt ()
   $3 = token ';' ()
-> $$ = nterm jump_statement ()
Stack now 0 58 127 187 196 346
Entering state 349
Reducing stack by rule 129 (line 450):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 58 127 187 196 346
Entering state 487
Reducing stack by rule 138 (line 471):
   $1 = nterm statement_seq ()
   $2 = nterm statement ()
-> $$ = nterm statement_seq ()
Stack now 0 58 127 187 196
Entering state 346
Reading a token: Next token is token '}' ()
Reducing stack by rule 365 (line 995):
   $1 = nterm statement_seq ()
-> $$ = nterm statement_seq_opt ()
Stack now 0 58 127 187 196
Entering state 355
Next token is token '}' ()
Shifting token '}' ()
Entering state 489
Reducing stack by rule 136 (line 466):
   $1 = token '{' ()
   $2 = nterm statement_seq_opt ()
   $3 = token '}' ()
-> $$ = nterm compound_statement ()
Stack now 0 58 127 187
Entering state 197
Reducing stack by rule 293 (line 790):
   $1 = nterm compound_statement ()
-> $$ = nterm function_body ()
Stack now 0 58 127 187
Entering state 317
Reducing stack by rule 290 (line 784):
   $1 = nterm decl_specifier_seq ()
   $2 = nterm declarator ()
   $3 = nterm ctor_initializer_opt ()
   $4 = nterm function_body ()
-> $$ = nterm function_definition ()
Stack now 0
Entering state 81
Reducing stack by rule 157 (line 518):
   $1 = nterm function_definition ()
-> $$ = nterm declaration ()
Stack now 0
Entering state 54
Reducing stack by rule 154 (line 512):
   $1 = nterm declaration ()
-> $$ = nterm declaration_seq ()
Stack now 0
Entering state 53
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 19
Reducing stack by rule 194 (line 579):
   $1 = token INT ()
-> $$ = nterm simple_type_specifier ()
Stack now 0 53
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 53
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0 53
Entering state 57
Reducing stack by rule 172 (line 545):
   $1 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0 53
Entering state 58
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 6 (line 189):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 53 58
Entering state 47
Reducing stack by rule 25 (line 246):
   $1 = nterm identifier ()
-> $$ = nterm unqualified_id ()
Stack now 0 53 58
Entering state 50
Reducing stack by rule 23 (line 241):
   $1 = nterm unqualified_id ()
-> $$ = nterm id_expression ()
Stack now 0 53 58
Entering state 49
Reducing stack by rule 264 (line 734):
   $1 = nterm id_expression ()
-> $$ = nterm declarator_id ()
Stack now 0 53 58
Entering state 80
Reducing stack by rule 246 (line 704):
   $1 = nterm declarator_id ()
-> $$ = nterm direct_declarator ()
Stack now 0 53 58
Entering state 77
Reading a token: Next token is token '(' ()
Shifting token '(' ()
Entering state 133
Reading a token: Next token is token ')' ()
Reducing stack by rule 282 (line 767):
-> $$ = nterm parameter_declaration_clause ()
Stack now 0 53 58 77 133
Entering state 199
Next token is token ')' ()
Shifting token ')' ()
Entering state 356
Reading a token: Next token is token '{' ()
Reducing stack by rule 250 (line 708):
   $1 = nterm direct_declarator ()
   $2 = token '(' ()
   $3 = nterm parameter_declaration_clause ()
   $4 = token ')' ()
-> $$ = nterm direct_declarator ()
Stack now 0 53 58
Entering state 77
Next token is token '{' ()
Reducing stack by rule 244 (line 699):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 53 58
Entering state 127
Next token is token '{' ()
Reducing stack by rule 380 (line 1034):
-> $$ = nterm ctor_initializer_opt ()
Stack now 0 53 58 127
Entering state 187
Next token is token '{' ()
Shifting token '{' ()
Entering state 196
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 19
Reducing stack by rule 194 (line 579):
   $1 = token INT ()
-> $$ = nterm simple_type_specifier ()
Stack now 0 53 58 127 187 196
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 53 58 127 187 196
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0 53 58 127 187 196
Entering state 57
Reducing stack by rule 172 (line 545):
   $1 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0 53 58 127 187 196
Entering state 352
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 6 (line 189):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 53 58 127 187 196 352
Entering state 47
Reducing stack by rule 25 (line 246):
   $1 = nterm identifier ()
-> $$ = nterm unqualified_id ()
Stack now 0 53 58 127 187 196 352
Entering state 50
Reducing stack by rule 23 (line 241):
   $1 = nterm unqualified_id ()
-> $$ = nterm id_expression ()
Stack now 0 53 58 127 187 196 352
Entering state 49
Reducing stack by rule 264 (line 734):
   $1 = nterm id_expression ()
-> $$ = nterm declarator_id ()
Stack now 0 53 58 127 187 196 352
Entering state 80
Reducing stack by rule 246 (line 704):
   $1 = nterm declarator_id ()
-> $$ = nterm direct_declarator ()
Stack now 0 53 58 127 187 196 352
Entering state 77
Reading a token: Next token is token ';' ()
Reducing stack by rule 244 (line 699):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 53 58 127 187 196 352
Entering state 307
Next token is token ';' ()
Reducing stack by rule 370 (line 1009):
-> $$ = nterm initializer_opt ()
Stack now 0 53 58 127 187 196 352 307
Entering state 186
Reducing stack by rule 243 (line 695):
   $1 = nterm declarator ()
   $2 = nterm initializer_opt ()
-> $$ = nterm init_declarator ()
Stack now 0 53 58 127 187 196 352
Entering state 126
Reducing stack by rule 241 (line 690):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 53 58 127 187 196 352
Entering state 125
Next token is token ';' ()
Shifting token ';' ()
Entering state 180
Reducing stack by rule 165 (line 532):
   $1 = nterm decl_specifier_seq ()
   $2 = nterm init_declarator_list ()
   $3 = token ';' ()
-> $$ = nterm simple_declaration ()
Stack now 0 53 58 127 187 196
Entering state 56
Reducing stack by rule 160 (line 524):
   $1 = nterm simple_declaration ()
-> $$ = nterm block_declaration ()
Stack now 0 53 58 127 187 196
Entering state 351
Reducing stack by rule 153 (line 504):
   $1 = nterm block_declaration ()
-> $$ = nterm declaration_statement ()
Stack now 0 53 58 127 187 196
Entering state 350
Reducing stack by rule 130 (line 451):
   $1 = nterm declaration_statement ()
-> $$ = nterm statement ()
Stack now 0 53 58 127 187 196
Entering state 342
Reducing stack by rule 137 (line 470):
   $1 = nterm statement ()
-> $$ = nterm statement_seq ()
Stack now 0 53 58 127 187 196
Entering state 346
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 19
Reducing stack by rule 194 (line 579):
   $1 = token INT ()
-> $$ = nterm simple_type_specifier ()
Stack now 0 53 58 127 187 196 346
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 53 58 127 187 196 346
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0 53 58 127 187 196 346
Entering state 57
Reducing stack by rule 172 (line 545):
   $1 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0 53 58 127 187 196 346
Entering state 352
Reading a token: Next token is token CLASS_NAME ()
Shifting token CLASS_NAME ()
Entering state 3
Reading a token: Next token is token ';' ()
Reducing stack by rule 4 (line 177):
   $1 = token CLASS_NAME ()
-> $$ = nterm class_name ()
Stack now 0 53 58 127 187 196 346 352
Entering state 45
Next token is token ';' ()
Reducing stack by rule 201 (line 589):
   $1 = nterm class_name ()
-> $$ = nterm type_name ()
Stack now 0 53 58 127 187 196 346 352
Entering state 63
Reducing stack by rule 187 (line 572):
   $1 = nterm type_name ()
-> $$ = nterm simple_type_specifier ()
Stack now 0 53 58 127 187 196 346 352
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 53 58 127 187 196 346 352
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0 53 58 127 187 196 346 352
Entering state 124
Reducing stack by rule 173 (line 546):
   $1 = nterm decl_specifier_seq ()
   $2 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0 53 58 127 187 196 346
Entering state 352
Next token is token ';' ()
Shifting token ';' ()
Entering state 123
Reducing stack by rule 166 (line 533):
   $1 = nterm decl_specifier_seq ()
   $2 = token ';' ()
-> $$ = nterm simple_declaration ()
Stack now 0 53 58 127 187 196 346
Entering state 56
Reducing stack by rule 160 (line 524):
   $1 = nterm simple_declaration ()
-> $$ = nterm block_declaration ()
Stack now 0 53 58 127 187 196 346
Entering state 351
Reducing stack by rule 153 (line 504):
   $1 = nterm block_declaration ()
-> $$ = nterm declaration_statement ()
Stack now 0 53 58 127 187 196 346
Entering state 350
Reducing stack by rule 130 (line 451):
   $1 = nterm declaration_statement ()
-> $$ = nterm statement ()
Stack now 0 53 58 127 187 196 346
Entering state 487
Reducing stack by rule 138 (line 471):
   $1 = nterm statement_seq ()
   $2 = nterm statement ()
-> $$ = nterm statement_seq ()
Stack now 0 53 58 127 187 196
Entering state 346
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 19
Reducing stack by rule 194 (line 579):
   $1 = token INT ()
-> $$ = nterm simple_type_specifier ()
Stack now 0 53 58 127 187 196 346
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 53 58 127 187 196 346
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0 53 58 127 187 196 346
Entering state 57
Reducing stack by rule 172 (line 545):
   $1 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0 53 58 127 187 196 346
Entering state 352
Reading a token: Next token is token CLASS_NAME ()
Shifting token CLASS_NAME ()
Entering state 3
Reading a token: Next token is token ';' ()
Reducing stack by rule 4 (line 177):
   $1 = token CLASS_NAME ()
-> $$ = nterm class_name ()
Stack now 0 53 58 127 187 196 346 352
Entering state 45
Next token is token ';' ()
Reducing stack by rule 201 (line 589):
   $1 = nterm class_name ()
-> $$ = nterm type_name ()
Stack now 0 53 58 127 187 196 346 352
Entering state 63
Reducing stack by rule 187 (line 572):
   $1 = nterm type_name ()
-> $$ = nterm simple_type_specifier ()
Stack now 0 53 58 127 187 196 346 352
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 53 58 127 187 196 346 352
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0 53 58 127 187 196 346 352
Entering state 124
Reducing stack by rule 173 (line 546):
   $1 = nterm decl_specifier_seq ()
   $2 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0 53 58 127 187 196 346
Entering state 352
Next token is token ';' ()
Shifting token ';' ()
Entering state 123
Reducing stack by rule 166 (line 533):
   $1 = nterm decl_specifier_seq ()
   $2 = token ';' ()
-> $$ = nterm simple_declaration ()
Stack now 0 53 58 127 187 196 346
Entering state 56
Reducing stack by rule 160 (line 524):
   $1 = nterm simple_declaration ()
-> $$ = nterm block_declaration ()
Stack now 0 53 58 127 187 196 346
Entering state 351
Reducing stack by rule 153 (line 504):
   $1 = nterm block_declaration ()
-> $$ = nterm declaration_statement ()
Stack now 0 53 58 127 187 196 346
Entering state 350
Reducing stack by rule 130 (line 451):
   $1 = nterm declaration_statement ()
-> $$ = nterm statement ()
Stack now 0 53 58 127 187 196 346
Entering state 487
Reducing stack by rule 138 (line 471):
   $1 = nterm statement_seq ()
   $2 = nterm statement ()
-> $$ = nterm statement_seq ()
Stack now 0 53 58 127 187 196
Entering state 346
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 1
Reducing stack by rule 6 (line 189):
   $1 = token IDENTIFIER ()
-> $$ = nterm identifier ()
Stack now 0 53 58 127 187 196 346
Entering state 338
Reading a token: Next token is token '=' ()
Reducing stack by rule 25 (line 246):
   $1 = nterm identifier ()
-> $$ = nterm unqualified_id ()
Stack now 0 53 58 127 187 196 346
Entering state 50
Reducing stack by rule 23 (line 241):
   $1 = nterm unqualified_id ()
-> $$ = nterm id_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 226
Reducing stack by rule 22 (line 237):
   $1 = nterm id_expression ()
-> $$ = nterm primary_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 225
Reducing stack by rule 32 (line 262):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 227
Next token is token '=' ()
Reducing stack by rule 43 (line 282):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 228
Reducing stack by rule 72 (line 338):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 232
Reducing stack by rule 74 (line 343):
   $1 = nterm cast_expression ()
-> $$ = nterm pm_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 233
Next token is token '=' ()
Reducing stack by rule 77 (line 349):
   $1 = nterm pm_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 234
Next token is token '=' ()
Reducing stack by rule 81 (line 356):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 235
Next token is token '=' ()
Reducing stack by rule 84 (line 362):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 236
Next token is token '=' ()
Reducing stack by rule 87 (line 368):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 237
Next token is token '=' ()
Reducing stack by rule 92 (line 376):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 238
Next token is token '=' ()
Reducing stack by rule 95 (line 382):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 239
Next token is token '=' ()
Reducing stack by rule 97 (line 387):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 240
Next token is token '=' ()
Reducing stack by rule 99 (line 392):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 241
Next token is token '=' ()
Reducing stack by rule 101 (line 397):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 242
Next token is token '=' ()
Reducing stack by rule 103 (line 402):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 310
Next token is token '=' ()
Shifting token '=' ()
Entering state 460
Reducing stack by rule 110 (line 418):
   $1 = token '=' ()
-> $$ = nterm assignment_operator ()
Stack now 0 53 58 127 187 196 346 310
Entering state 461
Reading a token: Next token is token INTEGER ()
Shifting token INTEGER ()
Entering state 200
Reducing stack by rule 12 (line 201):
   $1 = token INTEGER ()
-> $$ = nterm integer_literal ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 220
Reducing stack by rule 7 (line 193):
   $1 = nterm integer_literal ()
-> $$ = nterm literal ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 219
Reducing stack by rule 19 (line 234):
   $1 = nterm literal ()
-> $$ = nterm primary_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 225
Reducing stack by rule 32 (line 262):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 227
Reading a token: Next token is token ';' ()
Reducing stack by rule 43 (line 282):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 228
Reducing stack by rule 72 (line 338):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 232
Reducing stack by rule 74 (line 343):
   $1 = nterm cast_expression ()
-> $$ = nterm pm_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 233
Next token is token ';' ()
Reducing stack by rule 77 (line 349):
   $1 = nterm pm_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 234
Next token is token ';' ()
Reducing stack by rule 81 (line 356):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 235
Next token is token ';' ()
Reducing stack by rule 84 (line 362):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 236
Next token is token ';' ()
Reducing stack by rule 87 (line 368):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 237
Next token is token ';' ()
Reducing stack by rule 92 (line 376):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 238
Next token is token ';' ()
Reducing stack by rule 95 (line 382):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 239
Next token is token ';' ()
Reducing stack by rule 97 (line 387):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 240
Next token is token ';' ()
Reducing stack by rule 99 (line 392):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 241
Next token is token ';' ()
Reducing stack by rule 101 (line 397):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 242
Next token is token ';' ()
Reducing stack by rule 103 (line 402):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 310
Next token is token ';' ()
Reducing stack by rule 105 (line 407):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 311
Reducing stack by rule 107 (line 412):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 53 58 127 187 196 346 310 461
Entering state 559
Reducing stack by rule 108 (line 413):
   $1 = nterm logical_or_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 53 58 127 187 196 346
Entering state 340
Reducing stack by rule 121 (line 432):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 53 58 127 187 196 346
Entering state 341
Next token is token ';' ()
Reducing stack by rule 363 (line 990):
   $1 = nterm expression ()
-> $$ = nterm expression_opt ()
Stack now 0 53 58 127 187 196 346
Entering state 354
Next token is token ';' ()
Shifting token ';' ()
Entering state 488
Reducing stack by rule 135 (line 462):
   $1 = nterm expression_opt ()
   $2 = token ';' ()
-> $$ = nterm expression_statement ()
Stack now 0 53 58 127 187 196 346
Entering state 344
Reducing stack by rule 125 (line 446):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 53 58 127 187 196 346
Entering state 487
Reducing stack by rule 138 (line 471):
   $1 = nterm statement_seq ()
   $2 = nterm statement ()
-> $$ = nterm statement_seq ()
Stack now 0 53 58 127 187 196
Entering state 346
Reading a token: Next token is token CLASS_NAME ()
Shifting token CLASS_NAME ()
Entering state 88
Reducing stack by rule 4 (line 177):
   $1 = token CLASS_NAME ()
-> $$ = nterm class_name ()
Stack now 0 53 58 127 187 196 346
Entering state 45
Reading a token: Next token is token '=' ()
Reducing stack by rule 201 (line 589):
   $1 = nterm class_name ()
-> $$ = nterm type_name ()
Stack now 0 53 58 127 187 196 346
Entering state 63
Reducing stack by rule 187 (line 572):
   $1 = nterm type_name ()
-> $$ = nterm simple_type_specifier ()
Stack now 0 53 58 127 187 196 346
Entering state 62
Reducing stack by rule 182 (line 564):
   $1 = nterm simple_type_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 53 58 127 187 196 346
Entering state 61
Reducing stack by rule 168 (line 538):
   $1 = nterm type_specifier ()
-> $$ = nterm decl_specifier ()
Stack now 0 53 58 127 187 196 346
Entering state 57
Reducing stack by rule 172 (line 545):
   $1 = nterm decl_specifier ()
-> $$ = nterm decl_specifier_seq ()
Stack now 0 53 58 127 187 196 346
Entering state 352
Next token is token '=' ()
Syntax error: File: test_help.c, line 34:, token: =   syntax error
file list test_help.c
Opening test_help.c
ofstream was INSERTED into scope: classtable at location 6247 
string was INSERTED into scope: classtable at location 6369 
